import os
import json
from datetime import datetime, date, timedelta
import pytz
from typing import List, Dict, Any, Optional
import pandas as pd
from dotenv import load_dotenv
import re
from data_collector import DataCollector
from analyzer import DataAnalyzer
from memory_manager import FinanceBotMemory

load_dotenv()

class FinanceBot:
    """FinanceBot Inteligente - Usa IA para parsing e menos l√≥gica condicional"""
    
    def __init__(self):
        self.api_key = os.getenv('GROQ_API_KEY')
        if not self.api_key:
            raise ValueError("‚ùå GROQ_API_KEY n√£o encontrada")
        
        self.timezone = pytz.timezone('America/Sao_Paulo')
        
        from groq import Groq
        self.client = Groq(api_key=self.api_key)
        self.data_collector = DataCollector()
        self.memory = FinanceBotMemory()
        self.chat_history = []
        
        # Configura√ß√µes do bot
        self.FINANCE_TOPICS = [
            'gastos', 'despesas', 'receitas', 'or√ßamento', 'economia', 'dinheiro',
            'categorias', 'an√°lise', 'relat√≥rio', 'planejamento', 'investimento'
        ]
        
        print("‚úÖ FinanceBot inicializado com SUCESSO!")

    def _call_groq_ai(self, prompt: str, max_tokens: int = 500) -> str:
        """Chamada simplificada para IA"""
        try:
            completion = self.client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model="llama-3.1-8b-instant",
                temperature=0.3,
                max_tokens=max_tokens
            )
            return completion.choices[0].message.content
        except Exception as e:
            return f"Erro: {str(e)}"

    def _ai_parse_date(self, message: str) -> Dict[str, Any]:
        """IA analisa e extrai per√≠odo da mensagem"""
        current_date = datetime.now(self.timezone).strftime('%d/%m/%Y')
        
        prompt = f"""
        Analise esta mensagem e extraia informa√ß√µes de per√≠odo: "{message}"
        Data atual: {current_date}
        
        Retorne APENAS no formato JSON:
        {{
            "type": "specific_month|current_month|date_range|current_year",
            "month": n√∫mero_m√™s_ou_null,
            "year": n√∫mero_ano_ou_null,
            "description": "descri√ß√£o_amig√°vel"
        }}
        
        Exemplos:
        - "janeiro de 2024" ‚Üí {{"type": "specific_month", "month": 1, "year": 2024, "description": "janeiro de 2024"}}
        - "01/2024" ‚Üí {{"type": "specific_month", "month": 1, "year": 2024, "description": "janeiro de 2024"}}
        - "este m√™s" ‚Üí {{"type": "current_month", "month": null, "year": null, "description": "este m√™s"}}
        """
        
        ai_response = self._call_groq_ai(prompt, 200)
        
        try:
            # Extrair JSON da resposta da IA
            json_match = re.search(r'\{.*\}', ai_response, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
        except:
            pass
        
        # Fallback para m√™s atual
        now = datetime.now(self.timezone)
        return {
            "type": "current_month",
            "month": now.month,
            "year": now.year,
            "description": "este m√™s"
        }

    def _ai_classify_intent(self, message: str) -> Dict[str, Any]:
        """IA classifica a inten√ß√£o do usu√°rio"""
        prompt = f"""
        Classifique esta mensagem financeira: "{message}"
        
        Retorne APENAS no formato JSON:
        {{
            "intent": "analyze|register|advice|chat",
            "confidence": 0.0_a_1.0,
            "data": {{"valor": null, "categoria": null, "descricao": null}}
        }}
        
        Inten√ß√µes:
        - analyze: usu√°rio quer ver/analisar gastos existentes
        - register: usu√°rio quer cadastrar um novo gasto
        - advice: usu√°rio quer dicas/conselhos financeiros  
        - chat: conversa geral sobre finan√ßas
        
        Se register, extraia dados do gasto no campo "data".
        """
        
        ai_response = self._call_groq_ai(prompt, 300)
        
        try:
            json_match = re.search(r'\{.*\}', ai_response, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
        except:
            pass
        
        # Fallback
        return {"intent": "chat", "confidence": 0.5, "data": {}}

    def _query_expenses_by_period(self, period_info: Dict[str, Any]) -> pd.DataFrame:
        """Consulta gastos do banco baseado no per√≠odo"""
        df = self.data_collector.load_from_database()
        if df.empty:
            return df
        
        period_type = period_info.get('type')
        now = datetime.now(self.timezone)
        
        filters = {
            'specific_month': lambda: (
                (df['data'].dt.month == period_info.get('month')) & 
                (df['data'].dt.year == period_info.get('year'))
            ),
            'current_month': lambda: (
                (df['data'].dt.month == now.month) & 
                (df['data'].dt.year == now.year)
            ),
            'current_year': lambda: df['data'].dt.year == period_info.get('year', now.year)
        }
        
        filter_func = filters.get(period_type, lambda: df.index >= 0)
        return df[filter_func()]

    def _generate_analysis(self, user_message: str) -> str:
        """Gera an√°lise usando IA + dados reais"""
        try:
            # IA parseia o per√≠odo solicitado
            period_info = self._ai_parse_date(user_message)
            
            # Consulta dados reais
            df_period = self._query_expenses_by_period(period_info)
            
            if df_period.empty:
                return f"N√£o encontrei gastos para {period_info.get('description', 'esse per√≠odo')}.\n\nQue tal cadastrar alguns gastos? üòä"
            
            # Calcular m√©tricas
            total = float(df_period['valor'].sum())
            transacoes = len(df_period)
            media = float(df_period['valor'].mean())
            
            # Top categorias
            top_categories = df_period.groupby('categoria')['valor'].sum().sort_values(ascending=False)
            
            # IA gera resposta natural baseada nos dados
            data_summary = {
                'periodo': period_info.get('description'),
                'total': total,
                'transacoes': transacoes,
                'media': media,
                'categorias': [(cat, float(val)) for cat, val in top_categories.head(3).items()]
            }
            
            ai_prompt = f"""
            Com base nestes DADOS REAIS dos gastos do usu√°rio, gere uma an√°lise natural e humanizada:
            
            Dados: {json.dumps(data_summary, ensure_ascii=False)}
            
            Regras:
            - Use linguagem natural e amig√°vel
            - Destaque os pontos mais importantes
            - Inclua os valores exatos dos dados
            - Seja conciso mas informativo
            - Adicione uma dica pr√°tica ao final
            
            Formato de resposta desejado:
            "Em [per√≠odo] voc√™ gastou R$ [total] no total. Foram [transacoes] transa√ß√µes...
            [an√°lise das categorias principais]
            [dica personalizada]"
            """
            
            return self._call_groq_ai(ai_prompt, 600)
            
        except Exception as e:
            return f"N√£o consegui analisar os dados. Erro: {str(e)}"

    def _register_expense(self, expense_data: Dict) -> str:
        """Registra novo gasto no banco"""
        try:
            valor = float(expense_data.get('valor', 0))
            if valor <= 0:
                return "O valor precisa ser maior que zero."
            
            categoria = expense_data.get('categoria', 'Outros')
            descricao = expense_data.get('descricao', 'Gasto via FinanceBot')
            
            # Mapear categoria para padr√£o
            categoria_map = {
                'comida': 'Alimenta√ß√£o', 'alimentacao': 'Alimenta√ß√£o',
                'transporte': 'Transporte', 'uber': 'Transporte',
                'lazer': 'Lazer', 'diversao': 'Lazer',
                'saude': 'Sa√∫de', 'medico': 'Sa√∫de'
            }
            
            categoria_final = categoria_map.get(categoria.lower(), categoria.title())
            if categoria_final not in ["Alimenta√ß√£o", "Transporte", "Lazer", "Sa√∫de", "Roupas", "Mensalidades", "Outros"]:
                categoria_final = "Outros"
            
            novo_gasto = pd.DataFrame([{
                'data': date.today(),
                'valor': valor,
                'categoria': categoria_final,
                'descricao': descricao,
                'forma_pagamento': 'FinanceBot'
            }])
            
            success = self.data_collector.insert_new_expense(novo_gasto)
            
            if success:
                self.memory.update_memory()
                data_hoje = date.today().strftime('%d/%m')
                
                # IA gera resposta personalizada
                ai_prompt = f"""
                Gere uma confirma√ß√£o amig√°vel para este gasto registrado:
                Valor: R$ {valor:.2f}
                Categoria: {categoria_final}
                Descri√ß√£o: {descricao}
                Data: {data_hoje}
                
                Inclua uma dica contextual baseada no valor (se alto >200, m√©dio 50-200, baixo <50).
                Seja conciso e motivador.
                """
                
                return self._call_groq_ai(ai_prompt, 300)
            else:
                return "‚ùå N√£o consegui salvar no banco. Tente novamente."
                
        except Exception as e:
            return f"‚ùå Erro ao processar: {str(e)}"

    def _get_advice(self) -> str:
        """IA gera conselhos baseados no perfil do usu√°rio"""
        self.memory.update_memory()
        
        # Dados do perfil para IA
        profile_data = {
            'categoria_dominante': self.memory.user_profile.get('categoria_favorita', 'N/A'),
            'media_mensal': self.memory.user_profile.get('media_mensal', 0),
            'total_gastos': self.memory.user_profile.get('total_gastos', 0),
            'alertas': self.memory.user_profile.get('alertas_ativos', [])[:2],
            'recomendacoes': self.memory.user_profile.get('recomendacoes', [])[:2]
        }
        
        ai_prompt = f"""
        Com base no perfil financeiro real do usu√°rio, gere conselhos personalizados:
        
        Perfil: {json.dumps(profile_data, ensure_ascii=False)}
        
        Gere dicas pr√°ticas e espec√≠ficas baseadas nos dados reais.
        Se n√£o h√° dados suficientes, d√™ conselhos gerais de educa√ß√£o financeira.
        Use linguagem amig√°vel e motivadora.
        M√°ximo 4 dicas.
        """
        
        return self._call_groq_ai(ai_prompt, 500)

    def _is_finance_related(self, message: str) -> bool:
        """Verifica se mensagem √© sobre finan√ßas usando IA"""
        prompt = f"""
        Esta mensagem √© sobre finan√ßas pessoais? "{message}"
        
        T√≥picos financeiros: gastos, despesas, dinheiro, or√ßamento, economia, investimento, poupan√ßa, cart√£o, banco, pagamento, receita, categoria, planejamento.
        
        Responda apenas: SIM ou NAO
        """
        
        ai_response = self._call_groq_ai(prompt, 50)
        return "SIM" in ai_response.upper()

    def _handle_off_topic(self) -> str:
        """Resposta para assuntos n√£o financeiros"""
        responses = [
            "Sou especialista em finan√ßas pessoais! Como posso ajudar com seus gastos ou or√ßamento?",
            "Prefiro focar em suas finan√ßas. Quer analisar seus gastos?",
            "Que tal falarmos sobre como est√° seu controle financeiro?",
            "Minha especialidade s√£o finan√ßas! Posso ajudar com dicas de economia?"
        ]
        import random
        return random.choice(responses)

    def chat(self, message: str) -> str:
        """M√©todo principal - processamento inteligente"""
        try:
            # Verificar se √© sobre finan√ßas
            if not self._is_finance_related(message):
                return self._handle_off_topic()
            
            # IA classifica inten√ß√£o
            intent_result = self._ai_classify_intent(message)
            intent = intent_result.get('intent', 'chat')
            
            # Roteamento baseado na inten√ß√£o
            handlers = {
                'analyze': lambda: self._generate_analysis(message),
                'register': lambda: self._register_expense(intent_result.get('data', {})),
                'advice': lambda: self._get_advice(),
                'chat': lambda: self._general_finance_chat(message)
            }
            
            handler = handlers.get(intent, handlers['chat'])
            result = handler()
            
            # Manter hist√≥rico
            self.chat_history.append({"role": "user", "content": message})
            self.chat_history.append({"role": "assistant", "content": result})
            
            # Limitar hist√≥rico
            if len(self.chat_history) > 10:
                self.chat_history = self.chat_history[-10:]
            
            return result
            
        except Exception as e:
            return f"Estou aqui para ajudar com suas finan√ßas! Erro: {str(e)}"

    def _general_finance_chat(self, message: str) -> str:
        """Chat geral sobre finan√ßas usando IA"""
        context = self.memory.get_personalized_context()
        current_time = datetime.now(self.timezone).strftime('%d/%m/%Y %H:%M:%S')
        
        ai_prompt = f"""
        Voc√™ √© o FinanceBot, assistente financeiro amig√°vel.
        
        Contexto do usu√°rio:
        {context}
        
        Data/Hora atual (Brasil): {current_time}
        
        Mensagem do usu√°rio: "{message}"
        
        Regras:
        - Responda APENAS sobre finan√ßas pessoais
        - Use dados reais do contexto quando relevante
        - Seja amig√°vel e motivador
        - Ofere√ßa ajuda pr√°tica
        - Use portugu√™s brasileiro
        - M√°ximo 3 par√°grafos
        """
        
        try:
            completion = self.client.chat.completions.create(
                messages=[{"role": "system", "content": ai_prompt}],
                model="llama-3.1-8b-instant",
                temperature=0.4,
                max_tokens=400
            )
            return completion.choices[0].message.content
        except:
            return "Como posso ajudar voc√™ a controlar melhor suas finan√ßas? üí∞"

    def clear_history(self):
        """Limpa hist√≥rico de chat"""
        self.chat_history = []
